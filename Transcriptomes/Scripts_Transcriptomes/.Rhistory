all_val <- topTable(efit.contrast, coef = number, adjust.method = "BY", n = Inf, genelist = genes)
select_na <- sapply(all_val$ID, function(gene) {
!(str_detect(gene, "NA"))
})
all_val <- all_val[select_na, ]
hist(all_val$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 10000)
# "threshold" for the logFC threshold
threshold <- 1.5
# "pvalue" for the pvalue threshold
pvalue <- 0.1
signif <- all_val[which(all_val$logFC <= -threshold | all_val$logFC >= threshold), ]
hist(signif$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 1000)
hist(signif$P.Value, main = paste0("Distribution of differential expression P.value ", colnames(cont.matrix)[number]), pch = 19, breaks = 100)
signif <- signif[which(signif$P.Value <= pvalue), ]
efit.contrast$genes <- as.character(genes)
volcano_names <- ifelse(abs(efit.contrast$coefficients) >= 0.2 & efit.contrast$genes != "NA",
efit.contrast$genes, ""
)
getwd()
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number]), showWarnings = FALSE)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values"), showWarnings = FALSE)
png(file = paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/volcano_plot.png"))
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
dev.off()
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
UP <- signif[which(signif$logFC > 0), ] # UP
UP <- UP[order(UP$logFC, decreasing = T), ]
nrow(UP)
genes_up <- UP$ID
transit <- tstrsplit(as.vector(genes_up), "_///_")
genes_up <- c(transit[[1]]) # ,transit[[4]])
genes_up <- genes_up[which(genes_up != "NA")]
length(genes_up)
write.table(t(genes_up), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_up, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["UP"]][[colnames(cont.matrix)[number]]] <- genes_up
# DOWN
DOWN <- signif[which(signif$logFC < 0), ] # DOWN
DOWN <- DOWN[order(DOWN$logFC, decreasing = T), ]
nrow(DOWN)
genes_down <- DOWN$ID
transit <- tstrsplit(as.vector(genes_down), "_///_")
genes_down <- c(transit[[1]]) # ,transit[[4]])
genes_down <- genes_down[which(genes_down != "NA")]
length(genes_down)
write.table(t(genes_down), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_down, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["DOWN"]][[colnames(cont.matrix)[number]]] <- genes_down
up_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_up, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
up_entrez <- up_entrez$ENTREZID
up_entrez <- up_entrez[which(!(is.na(up_entrez)))]
goana_UP <- goana(de = up_entrez, geneid = up_entrez, FDR = 0.95, species = "Hs")
goana_UP <- goana_UP[order(goana_UP$P.DE), ]
View(goana_UP)
head(goana_UP)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO"), showWarnings = FALSE)
write.table(goana_UP, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/UP.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
down_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_down, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
down_entrez <- down_entrez$ENTREZID
down_entrez <- down_entrez[which(!(is.na(down_entrez)))]
goana_DOWN <- goana(de = down_entrez, geneid = down_entrez, FDR = 0.95, species = "Hs")
goana_DOWN <- goana_DOWN[order(goana_DOWN$P.DE), ]
View(goana_DOWN)
head(goana_DOWN)
write.table(goana_DOWN, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/DOWN.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
Genes_of_interest <- c("Akt", "PGC1A", "FTO", "MEF2C", "CPT1A", "CPT1a", "CPT1B", "CPT1b", "CPT1C", "CPT1c", "SLC25A20", "CPT2", "CEBPA", "CEBPa", "CEBPB", "CEBPb", "ARID1", "PPARgamma", "PPARA", "PPARalpha", "RXRA", "RXRa", "CPT")
selected_row <- sapply(all_val$ID, function(gene) {
gene %in% Genes_of_interest
})
Selected_genes_val <- all_val[selected_row, ]
select <- sapply(all$SYMBOL, function(gene) {
gene %in% Genes_of_interest
})
selected_values <- all[select,]
selected_values <- selected_values[,c(3,5:16)]
WT_selected <- selected_values[, c(1, 8,9,10)]
Octyl_selected <- selected_values[, c(1, 3, 5, 6)]
HG_selected <- selected_values[, c(1, 2, 4, 7)]
Mut_selected <- selected_values[, c(1, 11, 12, 13)]
WT_selected$Mean <- (WT_selected[, 2] + WT_selected[, 3] + WT_selected[, 4]) / 3
WT_selected <- WT_selected[,c(1,5)]
Octyl_selected$Mean <- (Octyl_selected[, 2] + Octyl_selected[, 3] + Octyl_selected[, 4]) / 3
Octyl_selected <- Octyl_selected[,c(1,5)]
HG_selected$Mean <- (HG_selected[, 2] + HG_selected[, 3] + HG_selected[, 4]) / 3
HG_selected <- HG_selected[,c(1,5)]
Mut_selected$Mean <- (Mut_selected[, 2] + Mut_selected[, 3] + Mut_selected[, 4]) / 3
Mut_selected <- Mut_selected[,c(1,5)]
Merged_selected <- merge(x = WT_selected, y = HG_selected, by.x = "SYMBOL", by.y = "SYMBOL")
Merged_selected <- merge(x = Merged_selected, y = Octyl_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl")
Merged_selected <- merge(x = Merged_selected, y = Mut_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl", "Mut")
Selected_genes_val <- Selected_genes_val[,c(1,2,5)]
Selected_genes_val <- merge(x = Selected_genes_val, y = Merged_selected, by.x = "ID", by.y = "SYMBOL")
Selected_genes_val <- Selected_genes_val[order(Selected_genes_val$P.Value),]
write.csv(Selected_genes_val, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/Selected_Genes.csv"), row.names = F, quote = T)
Selected_genes_val
WT <- all[, c(1, 2, 3, 4, 11, 12, 13)]
Octyl <- all[, c(1, 2, 3, 4, 6, 8, 9)]
HG <- all[, c(1, 2, 3, 4, 5, 7, 10)]
select <- sapply(Octyl$SYMBOL, function(Symbol) {
!str_detect(Symbol, "NA")
})
WT <- WT[select, ]
Octyl <- Octyl[select, ]
HG <- HG[select, ]
WT$Mean <- (WT[, 5] + WT[, 6] + WT[, 7]) / 3
Octyl$Mean <- (Octyl[, 5] + Octyl[, 6] + Octyl[, 7]) / 3
HG$Mean <- (HG[, 5] + HG[, 6] + HG[, 7]) / 3
WT_VS_HG <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, HG = HG$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
WT_VS_Octyl <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, Octyl = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
Octyl_VS_HG <- data.frame(Row.names = WT$Row.names, Octyl = Octyl$Mean, HG = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
all_val$rowname <- rownames(all_val)
Test <- merge(x= WT_VS_Octyl, y=all_val, by.x="Row.names", by.y="rowname")
Test <- Test[,c(2,3,8)]
Test$test <- ifelse(((Test$Octyl-Test$WT)*Test$logFC)>0, TRUE, FALSE)
write.csv(WT_VS_HG, file = "WT_VS_HG.csv", row.names = FALSE)
write.csv(WT_VS_Octyl, file = "WT_VS_Octyl.csv", row.names = FALSE)
write.csv(Octyl_VS_HG, file = "Octyl_VS_HG.csv", row.names = FALSE)
system("say finished")
library(VennDiagram)
library(RColorBrewer)
myCol <- brewer.pal(5, "Pastel2")
venn.diagram(x = Genes_values[["UP"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are up regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
venn.diagram(x = Genes_values[["DOWN"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are down regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
library(data.table)
# Select the contrast
colnames(cont.matrix)
number <- 4
colnames(cont.matrix)[number]
# get all the list   #coef parameter = contrast
genes <- Annot$SYMBOL
select <- sapply(genes, function(gene) {
!is.null(gene)
})
genes <- genes[select]
all_val <- topTable(efit.contrast, coef = number, adjust.method = "BY", n = Inf, genelist = genes)
select_na <- sapply(all_val$ID, function(gene) {
!(str_detect(gene, "NA"))
})
all_val <- all_val[select_na, ]
hist(all_val$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 10000)
# "threshold" for the logFC threshold
threshold <- 1.5
# "pvalue" for the pvalue threshold
pvalue <- 0.1
signif <- all_val[which(all_val$logFC <= -threshold | all_val$logFC >= threshold), ]
hist(signif$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 1000)
hist(signif$P.Value, main = paste0("Distribution of differential expression P.value ", colnames(cont.matrix)[number]), pch = 19, breaks = 100)
signif <- signif[which(signif$P.Value <= pvalue), ]
efit.contrast$genes <- as.character(genes)
volcano_names <- ifelse(abs(efit.contrast$coefficients) >= 0.2 & efit.contrast$genes != "NA",
efit.contrast$genes, ""
)
getwd()
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number]), showWarnings = FALSE)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values"), showWarnings = FALSE)
png(file = paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/volcano_plot.png"))
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
dev.off()
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
UP <- signif[which(signif$logFC > 0), ] # UP
UP <- UP[order(UP$logFC, decreasing = T), ]
nrow(UP)
genes_up <- UP$ID
transit <- tstrsplit(as.vector(genes_up), "_///_")
genes_up <- c(transit[[1]]) # ,transit[[4]])
genes_up <- genes_up[which(genes_up != "NA")]
length(genes_up)
write.table(t(genes_up), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_up, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["UP"]][[colnames(cont.matrix)[number]]] <- genes_up
# DOWN
DOWN <- signif[which(signif$logFC < 0), ] # DOWN
DOWN <- DOWN[order(DOWN$logFC, decreasing = T), ]
nrow(DOWN)
genes_down <- DOWN$ID
transit <- tstrsplit(as.vector(genes_down), "_///_")
genes_down <- c(transit[[1]]) # ,transit[[4]])
genes_down <- genes_down[which(genes_down != "NA")]
length(genes_down)
write.table(t(genes_down), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_down, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["DOWN"]][[colnames(cont.matrix)[number]]] <- genes_down
up_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_up, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
up_entrez <- up_entrez$ENTREZID
up_entrez <- up_entrez[which(!(is.na(up_entrez)))]
goana_UP <- goana(de = up_entrez, geneid = up_entrez, FDR = 0.95, species = "Hs")
goana_UP <- goana_UP[order(goana_UP$P.DE), ]
View(goana_UP)
head(goana_UP)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO"), showWarnings = FALSE)
write.table(goana_UP, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/UP.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
down_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_down, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
down_entrez <- down_entrez$ENTREZID
down_entrez <- down_entrez[which(!(is.na(down_entrez)))]
goana_DOWN <- goana(de = down_entrez, geneid = down_entrez, FDR = 0.95, species = "Hs")
goana_DOWN <- goana_DOWN[order(goana_DOWN$P.DE), ]
View(goana_DOWN)
head(goana_DOWN)
write.table(goana_DOWN, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/DOWN.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
Genes_of_interest <- c("Akt", "PGC1A", "FTO", "MEF2C", "CPT1A", "CPT1a", "CPT1B", "CPT1b", "CPT1C", "CPT1c", "SLC25A20", "CPT2", "CEBPA", "CEBPa", "CEBPB", "CEBPb", "ARID1", "PPARgamma", "PPARA", "PPARalpha", "RXRA", "RXRa", "CPT")
selected_row <- sapply(all_val$ID, function(gene) {
gene %in% Genes_of_interest
})
Selected_genes_val <- all_val[selected_row, ]
select <- sapply(all$SYMBOL, function(gene) {
gene %in% Genes_of_interest
})
selected_values <- all[select,]
selected_values <- selected_values[,c(3,5:16)]
WT_selected <- selected_values[, c(1, 8,9,10)]
Octyl_selected <- selected_values[, c(1, 3, 5, 6)]
HG_selected <- selected_values[, c(1, 2, 4, 7)]
Mut_selected <- selected_values[, c(1, 11, 12, 13)]
WT_selected$Mean <- (WT_selected[, 2] + WT_selected[, 3] + WT_selected[, 4]) / 3
WT_selected <- WT_selected[,c(1,5)]
Octyl_selected$Mean <- (Octyl_selected[, 2] + Octyl_selected[, 3] + Octyl_selected[, 4]) / 3
Octyl_selected <- Octyl_selected[,c(1,5)]
HG_selected$Mean <- (HG_selected[, 2] + HG_selected[, 3] + HG_selected[, 4]) / 3
HG_selected <- HG_selected[,c(1,5)]
Mut_selected$Mean <- (Mut_selected[, 2] + Mut_selected[, 3] + Mut_selected[, 4]) / 3
Mut_selected <- Mut_selected[,c(1,5)]
Merged_selected <- merge(x = WT_selected, y = HG_selected, by.x = "SYMBOL", by.y = "SYMBOL")
Merged_selected <- merge(x = Merged_selected, y = Octyl_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl")
Merged_selected <- merge(x = Merged_selected, y = Mut_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl", "Mut")
Selected_genes_val <- Selected_genes_val[,c(1,2,5)]
Selected_genes_val <- merge(x = Selected_genes_val, y = Merged_selected, by.x = "ID", by.y = "SYMBOL")
Selected_genes_val <- Selected_genes_val[order(Selected_genes_val$P.Value),]
write.csv(Selected_genes_val, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/Selected_Genes.csv"), row.names = F, quote = T)
Selected_genes_val
WT <- all[, c(1, 2, 3, 4, 11, 12, 13)]
Octyl <- all[, c(1, 2, 3, 4, 6, 8, 9)]
HG <- all[, c(1, 2, 3, 4, 5, 7, 10)]
select <- sapply(Octyl$SYMBOL, function(Symbol) {
!str_detect(Symbol, "NA")
})
WT <- WT[select, ]
Octyl <- Octyl[select, ]
HG <- HG[select, ]
WT$Mean <- (WT[, 5] + WT[, 6] + WT[, 7]) / 3
Octyl$Mean <- (Octyl[, 5] + Octyl[, 6] + Octyl[, 7]) / 3
HG$Mean <- (HG[, 5] + HG[, 6] + HG[, 7]) / 3
WT_VS_HG <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, HG = HG$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
WT_VS_Octyl <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, Octyl = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
Octyl_VS_HG <- data.frame(Row.names = WT$Row.names, Octyl = Octyl$Mean, HG = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
all_val$rowname <- rownames(all_val)
Test <- merge(x= WT_VS_Octyl, y=all_val, by.x="Row.names", by.y="rowname")
Test <- Test[,c(2,3,8)]
Test$test <- ifelse(((Test$Octyl-Test$WT)*Test$logFC)>0, TRUE, FALSE)
write.csv(WT_VS_HG, file = "WT_VS_HG.csv", row.names = FALSE)
write.csv(WT_VS_Octyl, file = "WT_VS_Octyl.csv", row.names = FALSE)
write.csv(Octyl_VS_HG, file = "Octyl_VS_HG.csv", row.names = FALSE)
system("say finished")
library(VennDiagram)
library(RColorBrewer)
myCol <- brewer.pal(5, "Pastel2")
venn.diagram(x = Genes_values[["UP"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are up regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
venn.diagram(x = Genes_values[["DOWN"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are down regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
library(data.table)
# Select the contrast
colnames(cont.matrix)
number <- 5
colnames(cont.matrix)[number]
# get all the list   #coef parameter = contrast
genes <- Annot$SYMBOL
select <- sapply(genes, function(gene) {
!is.null(gene)
})
genes <- genes[select]
all_val <- topTable(efit.contrast, coef = number, adjust.method = "BY", n = Inf, genelist = genes)
select_na <- sapply(all_val$ID, function(gene) {
!(str_detect(gene, "NA"))
})
all_val <- all_val[select_na, ]
hist(all_val$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 10000)
# "threshold" for the logFC threshold
threshold <- 1.5
# "pvalue" for the pvalue threshold
pvalue <- 0.1
signif <- all_val[which(all_val$logFC <= -threshold | all_val$logFC >= threshold), ]
hist(signif$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 1000)
# "threshold" for the logFC threshold
threshold <- 1
# "pvalue" for the pvalue threshold
pvalue <- 0.1
signif <- all_val[which(all_val$logFC <= -threshold | all_val$logFC >= threshold), ]
hist(signif$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 1000)
hist(signif$P.Value, main = paste0("Distribution of differential expression P.value ", colnames(cont.matrix)[number]), pch = 19, breaks = 100)
signif <- signif[which(signif$P.Value <= pvalue), ]
efit.contrast$genes <- as.character(genes)
volcano_names <- ifelse(abs(efit.contrast$coefficients) >= 0.2 & efit.contrast$genes != "NA",
efit.contrast$genes, ""
)
getwd()
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number]), showWarnings = FALSE)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values"), showWarnings = FALSE)
png(file = paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/volcano_plot.png"))
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
dev.off()
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
UP <- signif[which(signif$logFC > 0), ] # UP
UP <- UP[order(UP$logFC, decreasing = T), ]
nrow(UP)
genes_up <- UP$ID
transit <- tstrsplit(as.vector(genes_up), "_///_")
genes_up <- c(transit[[1]]) # ,transit[[4]])
# "threshold" for the logFC threshold
threshold <- 0.75
# "pvalue" for the pvalue threshold
pvalue <- 0.1
signif <- all_val[which(all_val$logFC <= -threshold | all_val$logFC >= threshold), ]
hist(signif$logFC, main = paste0("Distribution of differential expression value ", colnames(cont.matrix)[number]), pch = 19, breaks = 1000)
hist(signif$P.Value, main = paste0("Distribution of differential expression P.value ", colnames(cont.matrix)[number]), pch = 19, breaks = 100)
signif <- signif[which(signif$P.Value <= pvalue), ]
efit.contrast$genes <- as.character(genes)
volcano_names <- ifelse(abs(efit.contrast$coefficients) >= 0.2 & efit.contrast$genes != "NA",
efit.contrast$genes, ""
)
getwd()
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number]), showWarnings = FALSE)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values"), showWarnings = FALSE)
png(file = paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/volcano_plot.png"))
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
dev.off()
par(mfrow = c(1, 1))
volcanoplot(efit.contrast,
coef = number, style = "p-value", highlight = 150,
names = volcano_names,
xlab = "Log2 Fold Change", ylab = NULL, pch = 16, cex = 0.35,
main = colnames(cont.matrix)[number]
)
UP <- signif[which(signif$logFC > 0), ] # UP
UP <- UP[order(UP$logFC, decreasing = T), ]
nrow(UP)
genes_up <- UP$ID
transit <- tstrsplit(as.vector(genes_up), "_///_")
genes_up <- c(transit[[1]]) # ,transit[[4]])
genes_up <- genes_up[which(genes_up != "NA")]
length(genes_up)
write.table(t(genes_up), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_up, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/UP_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["UP"]][[colnames(cont.matrix)[number]]] <- genes_up
# DOWN
DOWN <- signif[which(signif$logFC < 0), ] # DOWN
DOWN <- DOWN[order(DOWN$logFC, decreasing = T), ]
nrow(DOWN)
genes_down <- DOWN$ID
transit <- tstrsplit(as.vector(genes_down), "_///_")
genes_down <- c(transit[[1]]) # ,transit[[4]])
genes_down <- genes_down[which(genes_down != "NA")]
length(genes_down)
write.table(t(genes_down), paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, ".csv"), row.names = F, col.names = F, quote = F, sep = "\t")
write.table(genes_down, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/DOWN_pval_", pvalue, "_logFC_", threshold, "cytos.csv"), row.names = F, col.names = F, quote = F, sep = "\t")
Genes_values[["DOWN"]][[colnames(cont.matrix)[number]]] <- genes_down
up_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_up, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
up_entrez <- up_entrez$ENTREZID
up_entrez <- up_entrez[which(!(is.na(up_entrez)))]
goana_UP <- goana(de = up_entrez, geneid = up_entrez, FDR = 0.95, species = "Hs")
goana_UP <- goana_UP[order(goana_UP$P.DE), ]
View(goana_UP)
head(goana_UP)
dir.create(paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO"), showWarnings = FALSE)
write.table(goana_UP, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/UP.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
down_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = genes_down, keytype = "SYMBOL", columns = c("SYMBOL", "ENTREZID"))
down_entrez <- down_entrez$ENTREZID
down_entrez <- down_entrez[which(!(is.na(down_entrez)))]
goana_DOWN <- goana(de = down_entrez, geneid = down_entrez, FDR = 0.95, species = "Hs")
goana_DOWN <- goana_DOWN[order(goana_DOWN$P.DE), ]
View(goana_DOWN)
head(goana_DOWN)
write.table(goana_DOWN, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/GO/DOWN.csv"), row.names = T, col.names = T, quote = T, sep = "\t")
Genes_of_interest <- c("Akt", "PGC1A", "FTO", "MEF2C", "CPT1A", "CPT1a", "CPT1B", "CPT1b", "CPT1C", "CPT1c", "SLC25A20", "CPT2", "CEBPA", "CEBPa", "CEBPB", "CEBPb", "ARID1", "PPARgamma", "PPARA", "PPARalpha", "RXRA", "RXRa", "CPT")
selected_row <- sapply(all_val$ID, function(gene) {
gene %in% Genes_of_interest
})
Selected_genes_val <- all_val[selected_row, ]
select <- sapply(all$SYMBOL, function(gene) {
gene %in% Genes_of_interest
})
selected_values <- all[select,]
selected_values <- selected_values[,c(3,5:16)]
WT_selected <- selected_values[, c(1, 8,9,10)]
Octyl_selected <- selected_values[, c(1, 3, 5, 6)]
HG_selected <- selected_values[, c(1, 2, 4, 7)]
Mut_selected <- selected_values[, c(1, 11, 12, 13)]
WT_selected$Mean <- (WT_selected[, 2] + WT_selected[, 3] + WT_selected[, 4]) / 3
WT_selected <- WT_selected[,c(1,5)]
Octyl_selected$Mean <- (Octyl_selected[, 2] + Octyl_selected[, 3] + Octyl_selected[, 4]) / 3
Octyl_selected <- Octyl_selected[,c(1,5)]
HG_selected$Mean <- (HG_selected[, 2] + HG_selected[, 3] + HG_selected[, 4]) / 3
HG_selected <- HG_selected[,c(1,5)]
Mut_selected$Mean <- (Mut_selected[, 2] + Mut_selected[, 3] + Mut_selected[, 4]) / 3
Mut_selected <- Mut_selected[,c(1,5)]
Merged_selected <- merge(x = WT_selected, y = HG_selected, by.x = "SYMBOL", by.y = "SYMBOL")
Merged_selected <- merge(x = Merged_selected, y = Octyl_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl")
Merged_selected <- merge(x = Merged_selected, y = Mut_selected, by.x = "SYMBOL", by.y = "SYMBOL")
colnames(Merged_selected) <- c("SYMBOL", "WT", "HG","Octyl", "Mut")
Selected_genes_val <- Selected_genes_val[,c(1,2,5)]
Selected_genes_val <- merge(x = Selected_genes_val, y = Merged_selected, by.x = "ID", by.y = "SYMBOL")
Selected_genes_val <- Selected_genes_val[order(Selected_genes_val$P.Value),]
write.csv(Selected_genes_val, paste0("../Results_Transcriptomes/", colnames(cont.matrix)[number], "/Genes_values/Selected_Genes.csv"), row.names = F, quote = T)
Selected_genes_val
WT <- all[, c(1, 2, 3, 4, 11, 12, 13)]
Octyl <- all[, c(1, 2, 3, 4, 6, 8, 9)]
HG <- all[, c(1, 2, 3, 4, 5, 7, 10)]
select <- sapply(Octyl$SYMBOL, function(Symbol) {
!str_detect(Symbol, "NA")
})
WT <- WT[select, ]
Octyl <- Octyl[select, ]
HG <- HG[select, ]
WT$Mean <- (WT[, 5] + WT[, 6] + WT[, 7]) / 3
Octyl$Mean <- (Octyl[, 5] + Octyl[, 6] + Octyl[, 7]) / 3
HG$Mean <- (HG[, 5] + HG[, 6] + HG[, 7]) / 3
WT_VS_HG <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, HG = HG$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
WT_VS_Octyl <- data.frame(Row.names = WT$Row.names, WT = WT$Mean, Octyl = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
Octyl_VS_HG <- data.frame(Row.names = WT$Row.names, Octyl = Octyl$Mean, HG = Octyl$Mean, ACCNUM = HG$ACCNUM, SYMBOL = HG$SYMBOL, DESC = HG$DESC)
all_val$rowname <- rownames(all_val)
Test <- merge(x= WT_VS_Octyl, y=all_val, by.x="Row.names", by.y="rowname")
Test <- Test[,c(2,3,8)]
Test$test <- ifelse(((Test$Octyl-Test$WT)*Test$logFC)>0, TRUE, FALSE)
write.csv(WT_VS_HG, file = "WT_VS_HG.csv", row.names = FALSE)
write.csv(WT_VS_Octyl, file = "WT_VS_Octyl.csv", row.names = FALSE)
write.csv(Octyl_VS_HG, file = "Octyl_VS_HG.csv", row.names = FALSE)
system("say finished")
library(VennDiagram)
library(RColorBrewer)
myCol <- brewer.pal(5, "Pastel2")
venn.diagram(x = Genes_values[["UP"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are up regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
venn.diagram(x = Genes_values[["DOWN"]],
category.names = c("HG_vs_Mut", "Octyl_vs_HG", "WT_vs_HG", "WT_vs_Mut", "WT_vs_Octyl"),
filename = '../Results_Transcriptomes/Genes that are down regulated for each comparison',
output = FALSE,
fill = myCol,
imagetype = "png"
)
